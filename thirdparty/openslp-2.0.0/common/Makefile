# Makefile.in generated by automake 1.11.3 from Makefile.am.
# common/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software
# Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





pkgdatadir = $(datadir)/openslp
pkgincludedir = $(includedir)/openslp
pkglibdir = $(libdir)/openslp
pkglibexecdir = $(libexecdir)/openslp
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
TESTS = slp-conf-test$(EXEEXT) slp-compare-test$(EXEEXT)
check_PROGRAMS = slp-conf-test$(EXEEXT) slp-compare-test$(EXEEXT)
subdir = common
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in slp_attr_l.c slp_attr_y.c slp_attr_y.h \
	slp_filter_l.c slp_filter_y.c slp_filter_y.h
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/acinclude.m4 \
	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
LTLIBRARIES = $(noinst_LTLIBRARIES)
libcommonlibslp_la_LIBADD =
am__libcommonlibslp_la_SOURCES_DIST = slp_atomic.c slp_buffer.c \
	slp_compare.c slp_database.c slp_debug.c slp_dhcp.c \
	slp_iface.c slp_linkedlist.c slp_message.c slp_net.c \
	slp_network.c slp_parse.c slp_pid.c slp_property.c \
	slp_thread.c slp_auth.c slp_crypto.c slp_spi.c slp_v1message.c \
	slp_utf8.c slp_v2message.c slp_xcast.c slp_xid.c slp_xmalloc.c
#am__objects_1 = slp_auth.lo slp_crypto.lo \
#	slp_spi.lo
am__objects_2 = slp_v1message.lo slp_utf8.lo
am_libcommonlibslp_la_OBJECTS = slp_atomic.lo slp_buffer.lo \
	slp_compare.lo slp_database.lo slp_debug.lo slp_dhcp.lo \
	slp_iface.lo slp_linkedlist.lo slp_message.lo slp_net.lo \
	slp_network.lo slp_parse.lo slp_pid.lo slp_property.lo \
	slp_thread.lo $(am__objects_1) $(am__objects_2) \
	slp_v2message.lo slp_xcast.lo slp_xid.lo slp_xmalloc.lo
libcommonlibslp_la_OBJECTS = $(am_libcommonlibslp_la_OBJECTS)
libcommonslpd_la_LIBADD =
am__libcommonslpd_la_SOURCES_DIST = slp_atomic.c slp_buffer.c \
	slp_compare.c slp_database.c slp_debug.c slp_dhcp.c \
	slp_iface.c slp_linkedlist.c slp_message.c slp_net.c \
	slp_network.c slp_parse.c slp_pid.c slp_predicate.c \
	slp_property.c slp_thread.c slp_auth.c slp_crypto.c slp_spi.c \
	slp_v1message.c slp_utf8.c slp_v2message.c slp_xid.c \
	slp_xmalloc.c slp_filter_y.y slp_filter_l.l slp_attr_y.y \
	slp_attr_l.l
am_libcommonslpd_la_OBJECTS = slp_atomic.lo slp_buffer.lo \
	slp_compare.lo slp_database.lo slp_debug.lo slp_dhcp.lo \
	slp_iface.lo slp_linkedlist.lo slp_message.lo slp_net.lo \
	slp_network.lo slp_parse.lo slp_pid.lo slp_predicate.lo \
	slp_property.lo slp_thread.lo $(am__objects_1) \
	$(am__objects_2) slp_v2message.lo slp_xid.lo slp_xmalloc.lo \
	slp_filter_y.lo slp_filter_l.lo slp_attr_y.lo slp_attr_l.lo
libcommonslpd_la_OBJECTS = $(am_libcommonslpd_la_OBJECTS)
am_slp_compare_test_OBJECTS = slp_compare_test-slp_compare.$(OBJEXT) \
	slp_compare_test-slp_linkedlist.$(OBJEXT) \
	slp_compare_test-slp_xmalloc.$(OBJEXT)
slp_compare_test_OBJECTS = $(am_slp_compare_test_OBJECTS)
slp_compare_test_LDADD = $(LDADD)
am_slp_conf_test_OBJECTS = slp_conf_test-slp_property.$(OBJEXT) \
	slp_conf_test-slp_thread.$(OBJEXT) \
	slp_conf_test-slp_debug.$(OBJEXT) \
	slp_conf_test-slp_linkedlist.$(OBJEXT) \
	slp_conf_test-slp_xmalloc.$(OBJEXT)
slp_conf_test_OBJECTS = $(am_slp_conf_test_OBJECTS)
slp_conf_test_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
LEXCOMPILE = $(LEX) $(AM_LFLAGS) $(LFLAGS)
LTLEXCOMPILE = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(LEX) $(AM_LFLAGS) $(LFLAGS)
YLWRAP = $(top_srcdir)/ylwrap
YACCCOMPILE = $(YACC) $(AM_YFLAGS) $(YFLAGS)
LTYACCCOMPILE = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(YACC) $(AM_YFLAGS) $(YFLAGS)
SOURCES = $(libcommonlibslp_la_SOURCES) $(libcommonslpd_la_SOURCES) \
	$(slp_compare_test_SOURCES) $(slp_conf_test_SOURCES)
DIST_SOURCES = $(am__libcommonlibslp_la_SOURCES_DIST) \
	$(am__libcommonslpd_la_SOURCES_DIST) \
	$(slp_compare_test_SOURCES) $(slp_conf_test_SOURCES)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
am__tty_colors = \
red=; grn=; lgn=; blu=; std=
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/kim/test_project/thirdparty/openslp-2.0.0/missing --run aclocal-1.11
ALLOCA = 
AMTAR = $${TAR-tar}
AR = ar
AUTOCONF = ${SHELL} /home/kim/test_project/thirdparty/openslp-2.0.0/missing --run autoconf
AUTOHEADER = ${SHELL} /home/kim/test_project/thirdparty/openslp-2.0.0/missing --run autoheader
AUTOMAKE = ${SHELL} /home/kim/test_project/thirdparty/openslp-2.0.0/missing --run automake-1.11
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -Wall  -O2
CPP = gcc -E
CPPFLAGS =  -DLINUX
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/x86_64-linux-gnu-ld -m elf_x86_64
LDFLAGS = 
LEX = ${SHELL} /home/kim/test_project/thirdparty/openslp-2.0.0/missing --run flex
LEXLIB = 
LEX_OUTPUT_ROOT = 
LIBOBJS = 
LIBS = -lpthread -lm -lnsl -lresolv 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/kim/test_project/thirdparty/openslp-2.0.0/missing --run makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = openslp
PACKAGE_BUGREPORT = openslp-devel@lists.sourceforge.net
PACKAGE_NAME = OpenSLP
PACKAGE_STRING = OpenSLP 2.0.0
PACKAGE_TARNAME = openslp
PACKAGE_URL = 
PACKAGE_VERSION = 2.0.0
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VERSION = 2.0.0
YACC = yacc
YFLAGS = 
abs_builddir = /home/kim/test_project/thirdparty/openslp-2.0.0/common
abs_srcdir = /home/kim/test_project/thirdparty/openslp-2.0.0/common
abs_top_builddir = /home/kim/test_project/thirdparty/openslp-2.0.0
abs_top_srcdir = /home/kim/test_project/thirdparty/openslp-2.0.0
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/kim/test_project/thirdparty/openslp-2.0.0/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..

#if you're building on Irix, replace .la with .a below
noinst_LTLIBRARIES = libcommonslpd.la libcommonlibslp.la
AM_YFLAGS = -d
EXTRA_DIST = slp_win32.c
slp_v1message_SRCS = slp_v1message.c slp_utf8.c
#slp_security_SRCS = slp_auth.c slp_crypto.c slp_spi.c

#if you're building on Irix, replace .la with .a below
libcommonlibslp_la_SOURCES = \
   slp_atomic.c \
   slp_buffer.c \
   slp_compare.c \
   slp_database.c \
   slp_debug.c \
   slp_dhcp.c \
   slp_iface.c \
   slp_linkedlist.c \
   slp_message.c \
   slp_net.c \
   slp_network.c \
   slp_parse.c \
   slp_pid.c \
   slp_property.c \
   slp_thread.c \
   $(slp_security_SRCS) \
   $(slp_v1message_SRCS) \
   slp_v2message.c \
   slp_xcast.c \
   slp_xid.c \
   slp_xmalloc.c


# Place yacc files before lex files below - lexx files include generated yacc headers

#if you're building on Irix, replace .la with .a below
libcommonslpd_la_SOURCES = \
   slp_atomic.c \
   slp_buffer.c \
   slp_compare.c \
   slp_database.c \
   slp_debug.c \
   slp_dhcp.c \
   slp_iface.c \
   slp_linkedlist.c \
   slp_message.c \
   slp_net.c \
   slp_network.c \
   slp_parse.c \
   slp_pid.c \
   slp_predicate.c \
   slp_property.c \
   slp_thread.c \
   $(slp_security_SRCS) \
   $(slp_v1message_SRCS) \
   slp_v2message.c \
   slp_xid.c \
   slp_xmalloc.c \
   slp_filter_y.y \
   slp_filter_l.l \
   slp_attr_y.y \
   slp_attr_l.l

noinst_HEADERS = \
   slp_atomic.h \
   slp_attr.h \
   slp_auth.h \
   slp_buffer.h \
   slp_compare.h \
   slp_crypto.h \
   slp_database.h \
   slp_debug.h \
   slp_dhcp.h \
   slp_filter.h \
   slp_iface.h \
   slp_linkedlist.h \
   slp_message.h \
   slp_net.h \
   slp_network.h \
   slp_parse.h \
   slp_pid.h \
   slp_predicate.h \
   slp_property.h \
   slp_socket.h \
   slp_spi.h \
   slp_thread.h \
   slp_types.h \
   slp_utf8.h \
   slp_v1message.h \
   slp_v2message.h \
   slp_xcast.h \
   slp_xid.h \
   slp_xmalloc.h

slp_conf_test_CPPFLAGS = -DSLP_PROPERTY_TEST -DDEBUG -DHAVE_CONFIG_H
slp_conf_test_SOURCES = slp_property.c slp_thread.c slp_debug.c slp_linkedlist.c slp_xmalloc.c
slp_compare_test_CPPFLAGS = -DSLP_COMPARE_TEST -DDEBUG -DHAVE_CONFIG_H
slp_compare_test_SOURCES = slp_compare.c slp_linkedlist.c slp_xmalloc.c
all: all-am

.SUFFIXES:
.SUFFIXES: .c .l .lo .o .obj .y
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu common/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu common/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libcommonlibslp.la: $(libcommonlibslp_la_OBJECTS) $(libcommonlibslp_la_DEPENDENCIES) $(EXTRA_libcommonlibslp_la_DEPENDENCIES) 
	$(LINK)  $(libcommonlibslp_la_OBJECTS) $(libcommonlibslp_la_LIBADD) $(LIBS)
slp_filter_y.h: slp_filter_y.c
	@if test ! -f $@; then rm -f slp_filter_y.c; else :; fi
	@if test ! -f $@; then $(MAKE) $(AM_MAKEFLAGS) slp_filter_y.c; else :; fi
slp_attr_y.h: slp_attr_y.c
	@if test ! -f $@; then rm -f slp_attr_y.c; else :; fi
	@if test ! -f $@; then $(MAKE) $(AM_MAKEFLAGS) slp_attr_y.c; else :; fi
libcommonslpd.la: $(libcommonslpd_la_OBJECTS) $(libcommonslpd_la_DEPENDENCIES) $(EXTRA_libcommonslpd_la_DEPENDENCIES) 
	$(LINK)  $(libcommonslpd_la_OBJECTS) $(libcommonslpd_la_LIBADD) $(LIBS)

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
slp-compare-test$(EXEEXT): $(slp_compare_test_OBJECTS) $(slp_compare_test_DEPENDENCIES) $(EXTRA_slp_compare_test_DEPENDENCIES) 
	@rm -f slp-compare-test$(EXEEXT)
	$(LINK) $(slp_compare_test_OBJECTS) $(slp_compare_test_LDADD) $(LIBS)
slp-conf-test$(EXEEXT): $(slp_conf_test_OBJECTS) $(slp_conf_test_DEPENDENCIES) $(EXTRA_slp_conf_test_DEPENDENCIES) 
	@rm -f slp-conf-test$(EXEEXT)
	$(LINK) $(slp_conf_test_OBJECTS) $(slp_conf_test_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/slp_atomic.Plo
include ./$(DEPDIR)/slp_attr_l.Plo
include ./$(DEPDIR)/slp_attr_y.Plo
include ./$(DEPDIR)/slp_auth.Plo
include ./$(DEPDIR)/slp_buffer.Plo
include ./$(DEPDIR)/slp_compare.Plo
include ./$(DEPDIR)/slp_compare_test-slp_compare.Po
include ./$(DEPDIR)/slp_compare_test-slp_linkedlist.Po
include ./$(DEPDIR)/slp_compare_test-slp_xmalloc.Po
include ./$(DEPDIR)/slp_conf_test-slp_debug.Po
include ./$(DEPDIR)/slp_conf_test-slp_linkedlist.Po
include ./$(DEPDIR)/slp_conf_test-slp_property.Po
include ./$(DEPDIR)/slp_conf_test-slp_thread.Po
include ./$(DEPDIR)/slp_conf_test-slp_xmalloc.Po
include ./$(DEPDIR)/slp_crypto.Plo
include ./$(DEPDIR)/slp_database.Plo
include ./$(DEPDIR)/slp_debug.Plo
include ./$(DEPDIR)/slp_dhcp.Plo
include ./$(DEPDIR)/slp_filter_l.Plo
include ./$(DEPDIR)/slp_filter_y.Plo
include ./$(DEPDIR)/slp_iface.Plo
include ./$(DEPDIR)/slp_linkedlist.Plo
include ./$(DEPDIR)/slp_message.Plo
include ./$(DEPDIR)/slp_net.Plo
include ./$(DEPDIR)/slp_network.Plo
include ./$(DEPDIR)/slp_parse.Plo
include ./$(DEPDIR)/slp_pid.Plo
include ./$(DEPDIR)/slp_predicate.Plo
include ./$(DEPDIR)/slp_property.Plo
include ./$(DEPDIR)/slp_spi.Plo
include ./$(DEPDIR)/slp_thread.Plo
include ./$(DEPDIR)/slp_utf8.Plo
include ./$(DEPDIR)/slp_v1message.Plo
include ./$(DEPDIR)/slp_v2message.Plo
include ./$(DEPDIR)/slp_xcast.Plo
include ./$(DEPDIR)/slp_xid.Plo
include ./$(DEPDIR)/slp_xmalloc.Plo

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

slp_compare_test-slp_compare.o: slp_compare.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_compare_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_compare_test-slp_compare.o -MD -MP -MF $(DEPDIR)/slp_compare_test-slp_compare.Tpo -c -o slp_compare_test-slp_compare.o `test -f 'slp_compare.c' || echo '$(srcdir)/'`slp_compare.c
	$(am__mv) $(DEPDIR)/slp_compare_test-slp_compare.Tpo $(DEPDIR)/slp_compare_test-slp_compare.Po
#	source='slp_compare.c' object='slp_compare_test-slp_compare.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_compare_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_compare_test-slp_compare.o `test -f 'slp_compare.c' || echo '$(srcdir)/'`slp_compare.c

slp_compare_test-slp_compare.obj: slp_compare.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_compare_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_compare_test-slp_compare.obj -MD -MP -MF $(DEPDIR)/slp_compare_test-slp_compare.Tpo -c -o slp_compare_test-slp_compare.obj `if test -f 'slp_compare.c'; then $(CYGPATH_W) 'slp_compare.c'; else $(CYGPATH_W) '$(srcdir)/slp_compare.c'; fi`
	$(am__mv) $(DEPDIR)/slp_compare_test-slp_compare.Tpo $(DEPDIR)/slp_compare_test-slp_compare.Po
#	source='slp_compare.c' object='slp_compare_test-slp_compare.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_compare_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_compare_test-slp_compare.obj `if test -f 'slp_compare.c'; then $(CYGPATH_W) 'slp_compare.c'; else $(CYGPATH_W) '$(srcdir)/slp_compare.c'; fi`

slp_compare_test-slp_linkedlist.o: slp_linkedlist.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_compare_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_compare_test-slp_linkedlist.o -MD -MP -MF $(DEPDIR)/slp_compare_test-slp_linkedlist.Tpo -c -o slp_compare_test-slp_linkedlist.o `test -f 'slp_linkedlist.c' || echo '$(srcdir)/'`slp_linkedlist.c
	$(am__mv) $(DEPDIR)/slp_compare_test-slp_linkedlist.Tpo $(DEPDIR)/slp_compare_test-slp_linkedlist.Po
#	source='slp_linkedlist.c' object='slp_compare_test-slp_linkedlist.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_compare_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_compare_test-slp_linkedlist.o `test -f 'slp_linkedlist.c' || echo '$(srcdir)/'`slp_linkedlist.c

slp_compare_test-slp_linkedlist.obj: slp_linkedlist.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_compare_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_compare_test-slp_linkedlist.obj -MD -MP -MF $(DEPDIR)/slp_compare_test-slp_linkedlist.Tpo -c -o slp_compare_test-slp_linkedlist.obj `if test -f 'slp_linkedlist.c'; then $(CYGPATH_W) 'slp_linkedlist.c'; else $(CYGPATH_W) '$(srcdir)/slp_linkedlist.c'; fi`
	$(am__mv) $(DEPDIR)/slp_compare_test-slp_linkedlist.Tpo $(DEPDIR)/slp_compare_test-slp_linkedlist.Po
#	source='slp_linkedlist.c' object='slp_compare_test-slp_linkedlist.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_compare_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_compare_test-slp_linkedlist.obj `if test -f 'slp_linkedlist.c'; then $(CYGPATH_W) 'slp_linkedlist.c'; else $(CYGPATH_W) '$(srcdir)/slp_linkedlist.c'; fi`

slp_compare_test-slp_xmalloc.o: slp_xmalloc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_compare_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_compare_test-slp_xmalloc.o -MD -MP -MF $(DEPDIR)/slp_compare_test-slp_xmalloc.Tpo -c -o slp_compare_test-slp_xmalloc.o `test -f 'slp_xmalloc.c' || echo '$(srcdir)/'`slp_xmalloc.c
	$(am__mv) $(DEPDIR)/slp_compare_test-slp_xmalloc.Tpo $(DEPDIR)/slp_compare_test-slp_xmalloc.Po
#	source='slp_xmalloc.c' object='slp_compare_test-slp_xmalloc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_compare_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_compare_test-slp_xmalloc.o `test -f 'slp_xmalloc.c' || echo '$(srcdir)/'`slp_xmalloc.c

slp_compare_test-slp_xmalloc.obj: slp_xmalloc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_compare_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_compare_test-slp_xmalloc.obj -MD -MP -MF $(DEPDIR)/slp_compare_test-slp_xmalloc.Tpo -c -o slp_compare_test-slp_xmalloc.obj `if test -f 'slp_xmalloc.c'; then $(CYGPATH_W) 'slp_xmalloc.c'; else $(CYGPATH_W) '$(srcdir)/slp_xmalloc.c'; fi`
	$(am__mv) $(DEPDIR)/slp_compare_test-slp_xmalloc.Tpo $(DEPDIR)/slp_compare_test-slp_xmalloc.Po
#	source='slp_xmalloc.c' object='slp_compare_test-slp_xmalloc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_compare_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_compare_test-slp_xmalloc.obj `if test -f 'slp_xmalloc.c'; then $(CYGPATH_W) 'slp_xmalloc.c'; else $(CYGPATH_W) '$(srcdir)/slp_xmalloc.c'; fi`

slp_conf_test-slp_property.o: slp_property.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_conf_test-slp_property.o -MD -MP -MF $(DEPDIR)/slp_conf_test-slp_property.Tpo -c -o slp_conf_test-slp_property.o `test -f 'slp_property.c' || echo '$(srcdir)/'`slp_property.c
	$(am__mv) $(DEPDIR)/slp_conf_test-slp_property.Tpo $(DEPDIR)/slp_conf_test-slp_property.Po
#	source='slp_property.c' object='slp_conf_test-slp_property.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_conf_test-slp_property.o `test -f 'slp_property.c' || echo '$(srcdir)/'`slp_property.c

slp_conf_test-slp_property.obj: slp_property.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_conf_test-slp_property.obj -MD -MP -MF $(DEPDIR)/slp_conf_test-slp_property.Tpo -c -o slp_conf_test-slp_property.obj `if test -f 'slp_property.c'; then $(CYGPATH_W) 'slp_property.c'; else $(CYGPATH_W) '$(srcdir)/slp_property.c'; fi`
	$(am__mv) $(DEPDIR)/slp_conf_test-slp_property.Tpo $(DEPDIR)/slp_conf_test-slp_property.Po
#	source='slp_property.c' object='slp_conf_test-slp_property.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_conf_test-slp_property.obj `if test -f 'slp_property.c'; then $(CYGPATH_W) 'slp_property.c'; else $(CYGPATH_W) '$(srcdir)/slp_property.c'; fi`

slp_conf_test-slp_thread.o: slp_thread.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_conf_test-slp_thread.o -MD -MP -MF $(DEPDIR)/slp_conf_test-slp_thread.Tpo -c -o slp_conf_test-slp_thread.o `test -f 'slp_thread.c' || echo '$(srcdir)/'`slp_thread.c
	$(am__mv) $(DEPDIR)/slp_conf_test-slp_thread.Tpo $(DEPDIR)/slp_conf_test-slp_thread.Po
#	source='slp_thread.c' object='slp_conf_test-slp_thread.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_conf_test-slp_thread.o `test -f 'slp_thread.c' || echo '$(srcdir)/'`slp_thread.c

slp_conf_test-slp_thread.obj: slp_thread.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_conf_test-slp_thread.obj -MD -MP -MF $(DEPDIR)/slp_conf_test-slp_thread.Tpo -c -o slp_conf_test-slp_thread.obj `if test -f 'slp_thread.c'; then $(CYGPATH_W) 'slp_thread.c'; else $(CYGPATH_W) '$(srcdir)/slp_thread.c'; fi`
	$(am__mv) $(DEPDIR)/slp_conf_test-slp_thread.Tpo $(DEPDIR)/slp_conf_test-slp_thread.Po
#	source='slp_thread.c' object='slp_conf_test-slp_thread.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_conf_test-slp_thread.obj `if test -f 'slp_thread.c'; then $(CYGPATH_W) 'slp_thread.c'; else $(CYGPATH_W) '$(srcdir)/slp_thread.c'; fi`

slp_conf_test-slp_debug.o: slp_debug.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_conf_test-slp_debug.o -MD -MP -MF $(DEPDIR)/slp_conf_test-slp_debug.Tpo -c -o slp_conf_test-slp_debug.o `test -f 'slp_debug.c' || echo '$(srcdir)/'`slp_debug.c
	$(am__mv) $(DEPDIR)/slp_conf_test-slp_debug.Tpo $(DEPDIR)/slp_conf_test-slp_debug.Po
#	source='slp_debug.c' object='slp_conf_test-slp_debug.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_conf_test-slp_debug.o `test -f 'slp_debug.c' || echo '$(srcdir)/'`slp_debug.c

slp_conf_test-slp_debug.obj: slp_debug.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_conf_test-slp_debug.obj -MD -MP -MF $(DEPDIR)/slp_conf_test-slp_debug.Tpo -c -o slp_conf_test-slp_debug.obj `if test -f 'slp_debug.c'; then $(CYGPATH_W) 'slp_debug.c'; else $(CYGPATH_W) '$(srcdir)/slp_debug.c'; fi`
	$(am__mv) $(DEPDIR)/slp_conf_test-slp_debug.Tpo $(DEPDIR)/slp_conf_test-slp_debug.Po
#	source='slp_debug.c' object='slp_conf_test-slp_debug.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_conf_test-slp_debug.obj `if test -f 'slp_debug.c'; then $(CYGPATH_W) 'slp_debug.c'; else $(CYGPATH_W) '$(srcdir)/slp_debug.c'; fi`

slp_conf_test-slp_linkedlist.o: slp_linkedlist.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_conf_test-slp_linkedlist.o -MD -MP -MF $(DEPDIR)/slp_conf_test-slp_linkedlist.Tpo -c -o slp_conf_test-slp_linkedlist.o `test -f 'slp_linkedlist.c' || echo '$(srcdir)/'`slp_linkedlist.c
	$(am__mv) $(DEPDIR)/slp_conf_test-slp_linkedlist.Tpo $(DEPDIR)/slp_conf_test-slp_linkedlist.Po
#	source='slp_linkedlist.c' object='slp_conf_test-slp_linkedlist.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_conf_test-slp_linkedlist.o `test -f 'slp_linkedlist.c' || echo '$(srcdir)/'`slp_linkedlist.c

slp_conf_test-slp_linkedlist.obj: slp_linkedlist.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_conf_test-slp_linkedlist.obj -MD -MP -MF $(DEPDIR)/slp_conf_test-slp_linkedlist.Tpo -c -o slp_conf_test-slp_linkedlist.obj `if test -f 'slp_linkedlist.c'; then $(CYGPATH_W) 'slp_linkedlist.c'; else $(CYGPATH_W) '$(srcdir)/slp_linkedlist.c'; fi`
	$(am__mv) $(DEPDIR)/slp_conf_test-slp_linkedlist.Tpo $(DEPDIR)/slp_conf_test-slp_linkedlist.Po
#	source='slp_linkedlist.c' object='slp_conf_test-slp_linkedlist.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_conf_test-slp_linkedlist.obj `if test -f 'slp_linkedlist.c'; then $(CYGPATH_W) 'slp_linkedlist.c'; else $(CYGPATH_W) '$(srcdir)/slp_linkedlist.c'; fi`

slp_conf_test-slp_xmalloc.o: slp_xmalloc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_conf_test-slp_xmalloc.o -MD -MP -MF $(DEPDIR)/slp_conf_test-slp_xmalloc.Tpo -c -o slp_conf_test-slp_xmalloc.o `test -f 'slp_xmalloc.c' || echo '$(srcdir)/'`slp_xmalloc.c
	$(am__mv) $(DEPDIR)/slp_conf_test-slp_xmalloc.Tpo $(DEPDIR)/slp_conf_test-slp_xmalloc.Po
#	source='slp_xmalloc.c' object='slp_conf_test-slp_xmalloc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_conf_test-slp_xmalloc.o `test -f 'slp_xmalloc.c' || echo '$(srcdir)/'`slp_xmalloc.c

slp_conf_test-slp_xmalloc.obj: slp_xmalloc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT slp_conf_test-slp_xmalloc.obj -MD -MP -MF $(DEPDIR)/slp_conf_test-slp_xmalloc.Tpo -c -o slp_conf_test-slp_xmalloc.obj `if test -f 'slp_xmalloc.c'; then $(CYGPATH_W) 'slp_xmalloc.c'; else $(CYGPATH_W) '$(srcdir)/slp_xmalloc.c'; fi`
	$(am__mv) $(DEPDIR)/slp_conf_test-slp_xmalloc.Tpo $(DEPDIR)/slp_conf_test-slp_xmalloc.Po
#	source='slp_xmalloc.c' object='slp_conf_test-slp_xmalloc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(slp_conf_test_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o slp_conf_test-slp_xmalloc.obj `if test -f 'slp_xmalloc.c'; then $(CYGPATH_W) 'slp_xmalloc.c'; else $(CYGPATH_W) '$(srcdir)/slp_xmalloc.c'; fi`

.l.c:
	$(am__skiplex) $(SHELL) $(YLWRAP) $< $(LEX_OUTPUT_ROOT).c $@ -- $(LEXCOMPILE)

.y.c:
	$(am__skipyacc) $(SHELL) $(YLWRAP) $< y.tab.c $@ y.tab.h $*.h y.output $*.output -- $(YACCCOMPILE)

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; res=FAIL; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    col="$$grn"; \
	  else \
	    col="$$red"; \
	  fi; \
	  echo "$${col}$$dashes$${std}"; \
	  echo "$${col}$$banner$${std}"; \
	  test -z "$$skipped" || echo "$${col}$$skipped$${std}"; \
	  test -z "$$report" || echo "$${col}$$report$${std}"; \
	  echo "$${col}$$dashes$${std}"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-rm -f slp_attr_l.c
	-rm -f slp_attr_y.c
	-rm -f slp_attr_y.h
	-rm -f slp_filter_l.c
	-rm -f slp_filter_y.c
	-rm -f slp_filter_y.h
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool \
	clean-noinstLTLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic clean-libtool \
	clean-noinstLTLIBRARIES ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
